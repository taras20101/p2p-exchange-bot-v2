# -*- coding: utf-8 -*-
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

from config import TOKEN
from handlers import start, buy, sell, spreads, settings

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")
    if update.message:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {update.message.text}")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏ start
    application.add_handler(CommandHandler("start", start.start_command))
    logger.info("–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ start")
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É
    buy_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ö—É–ø–∏—Ç–∏ USDT$"), buy.buy_usdt)],
        states={
            buy.CHOOSE_EXCHANGE: [CallbackQueryHandler(buy.exchange_callback)]
        },
        fallbacks=[MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), start.start_command)]
    )
    application.add_handler(buy_handler)

    sell_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí± –ü—Ä–æ–¥–∞—Ç–∏ USDT$"), sell.sell_usdt)],
        states={
            sell.CHOOSE_EXCHANGE: [CallbackQueryHandler(sell.exchange_callback)]
        },
        fallbacks=[MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), start.start_command)]
    )
    application.add_handler(sell_handler)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    settings_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è$"), settings.settings_command),
            CommandHandler("settings", settings.settings_command)
        ],
        states={
            settings.SETTINGS_MENU: [
                CallbackQueryHandler(settings.button_callback),
                MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è$"), settings.settings_command)
            ],
            'ENTER_LIMIT': [MessageHandler(filters.TEXT & ~filters.COMMAND, settings.enter_limit)],
            'ENTER_TRANSACTION': [MessageHandler(filters.TEXT & ~filters.COMMAND, settings.enter_transaction)]
        },
        fallbacks=[MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), start.start_command)],
        per_message=False
    )
    application.add_handler(settings_handler)
    logger.info("–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø—Ä–µ–¥—ñ–≤
    application.add_handler(MessageHandler(filters.Regex("^üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤$"), spreads.show_spreads))
    logger.info("–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø—Ä–µ–¥—ñ–≤")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debug_handler))

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    logger.info("–î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 