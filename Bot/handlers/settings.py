from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
import json

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
SETTINGS_MENU = range(1)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    verified_only = context.user_data.get('verified_only', False)
    limit_amount = context.user_data.get('limit_amount', 0)
    transaction_amount = context.user_data.get('transaction_amount', 0)
    selected_exchange = context.user_data.get('exchange', 'binance')
    
    keyboard = [
        [InlineKeyboardButton(
            f"üè¶ –ë—ñ—Ä–∂–∞: {selected_exchange.capitalize()}", 
            callback_data='toggle_exchange'
        )],
        [InlineKeyboardButton(
            f"‚úÖ –¢—ñ–ª—å–∫–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ: {'–£–≤—ñ–º–∫' if verified_only else '–í–∏–º–∫'}", 
            callback_data='toggle_verified'
        )],
        [InlineKeyboardButton(
            f"üíé –õ—ñ–º—ñ—Ç –æ—Ä–¥–µ—Ä–∞ (USDT): {limit_amount if limit_amount > 0 else '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}", 
            callback_data='set_limit'
        )],
        [InlineKeyboardButton(
            f"üíµ –°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (UAH): {transaction_amount if transaction_amount > 0 else '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}", 
            callback_data='set_transaction'
        )],
        [InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='reset_settings')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(
                "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:",
                reply_markup=reply_markup
            )
        except Exception as e:
            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É
            pass
    else:
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:",
            reply_markup=reply_markup
        )
    return SETTINGS_MENU

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'toggle_exchange':
        current = context.user_data.get('exchange', 'binance')
        context.user_data['exchange'] = 'bybit' if current == 'binance' else 'binance'
        await settings_command(update, context)
    
    elif query.data == 'save_h1':
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫ H1
        settings = {
            'verified_only': context.user_data.get('verified_only', False),
            'limit_amount': context.user_data.get('limit_amount', 0),
            'transaction_amount': context.user_data.get('transaction_amount', 0),
            'exchange': context.user_data.get('exchange', 'binance')
        }
        context.user_data['h1_settings'] = settings
        await query.message.reply_text("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è H1 –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        await settings_command(update, context)
    
    elif query.data == 'load_h1':
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è H1
        if 'h1_settings' in context.user_data:
            settings = context.user_data['h1_settings']
            context.user_data.update(settings)
            await query.message.reply_text("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è H1 –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        else:
            await query.message.reply_text("‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è H1 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await settings_command(update, context)
    
    elif query.data == 'toggle_verified':
        context.user_data['verified_only'] = not context.user_data.get('verified_only', False)
        await settings_command(update, context)
        return SETTINGS_MENU
    
    elif query.data == 'set_limit':
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text(
            "üíé –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç –æ—Ä–¥–µ—Ä–∞ –≤ USDT (0 –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è):\n\n"
            "–ë—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Å—É–º–æ—é –±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–æ—é –≤–∫–∞–∑–∞–Ω—ñ–π",
            reply_markup=reply_markup
        )
        return 'ENTER_LIMIT'
    
    elif query.data == 'set_transaction':
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text(
            "üíµ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ UAH (0 –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è):\n\n"
            "–ë—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó",
            reply_markup=reply_markup
        )
        return 'ENTER_TRANSACTION'
    
    elif query.data == 'reset_settings':
        context.user_data.clear()
        context.user_data['verified_only'] = False
        context.user_data['limit_amount'] = 0
        context.user_data['transaction_amount'] = 0
        await query.message.reply_text("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å")
        await settings_command(update, context)

async def enter_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS_MENU
        
    try:
        amount = float(update.message.text)
        if amount < 0:
            raise ValueError
        context.user_data['limit_amount'] = amount
        await settings_command(update, context)
        return SETTINGS_MENU
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ")
        return 'ENTER_LIMIT'

async def enter_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS_MENU
        
    try:
        amount = float(update.message.text)
        if amount < 0:
            raise ValueError
        context.user_data['transaction_amount'] = amount
        await settings_command(update, context)
        return SETTINGS_MENU
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ")
        return 'ENTER_TRANSACTION' 